[tool.poetry]
name = "qontinui-devtools"
version = "1.1.0"
description = "Sophisticated analysis, debugging, and diagnostic tools for Qontinui - Now with Phase 4 Advanced Analysis"
authors = ["Qontinui Team"]
license = "MIT"
readme = "README.md"
homepage = "https://github.com/qontinui/qontinui-devtools"
repository = "https://github.com/qontinui/qontinui-devtools"
documentation = "https://qontinui-devtools.readthedocs.io"
keywords = ["automation", "debugging", "analysis", "testing", "diagnostics"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Quality Assurance",
    "Topic :: Software Development :: Testing",
]
packages = [
    { include = "qontinui_devtools", from = "python" }
]

[tool.poetry.dependencies]
python = "^3.11"
click = "^8.1.7"
rich = "^13.7.0"
networkx = "^3.2.1"
graphviz = "^0.20.1"
astroid = "^3.0.2"
radon = "^6.0.1"
matplotlib = "^3.8.2"
pydantic = "^2.5.3"
structlog = "^24.1.0"
psutil = "^5.9.8"
py-spy = "^0.3.14"
memray = {version = "^1.11.0", optional = true}
lxml = "^5.1.0"
jinja2 = "^3.1.3"
tabulate = "^0.9.0"
colorama = "^0.4.6"
pillow = "^10.2.0"
aiohttp = "^3.9.1"

[tool.poetry.group.dev.dependencies]
pytest = "^7.4.4"
pytest-cov = "^4.1.0"
pytest-asyncio = "^0.23.3"
pytest-timeout = "^2.2.0"
black = "^24.1.1"
ruff = "^0.1.14"
mypy = "^1.8.0"
types-psutil = "^5.9.5"
types-tabulate = "^0.9.0"
ipython = "^8.20.0"
pytest-xdist = "^3.5.0"

[tool.poetry.extras]
memory = ["memray"]
all = ["memray"]

[tool.poetry.scripts]
qontinui-devtools = "qontinui_devtools.cli:main"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.black]
line-length = 100
target-version = ['py311']
include = '\.pyi?$'

[tool.ruff]
line-length = 100
target-version = "py311"
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
]
ignore = [
    "E501",  # line too long (handled by black)
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "graphviz.*",
    "radon.*",
    "astroid.*",
    "matplotlib.*",
    "networkx.*",
    "aiohttp.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --cov=qontinui_devtools --cov-report=term-missing --cov-report=html"
testpaths = ["python/tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

[tool.coverage.run]
source = ["python/qontinui_devtools"]
omit = [
    "*/tests/*",
    "*/test_*.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
